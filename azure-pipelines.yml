# Node.js React Web App to Linux on Azure
# Build a Node.js React app and deploy it to Azure as a Linux web app.

trigger:
- staging

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '802e3b54-e862-400f-99da-3d80e72f07c2'

  # Web app name
  webAppName: 'myportfolio-staging'

  # Environment name
  environmentName: 'myportfolio-staging'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '22.x'
      displayName: 'Install Node.js 22.x'

    # Build el frontend React (client) con configuraciÃ³n de staging
    - script: |
        cd client
        npm ci
        npm run build:staging
      displayName: 'Build React frontend for staging'

    # Preparar el servidor y copiar los archivos compilados del frontend
    - script: |
        cd server
        npm ci
        mkdir -p public
        cp -r ../client/dist/* public/
      displayName: 'Setup server and copy frontend build'

    # Crear un archivo .env.staging en el servidor si no existe
    - script: |
        cd server
        if [ ! -f .env.staging ]; then
          echo "# Environment variables for staging" > .env.staging
          echo "PORT=8080" >> .env.staging
          echo "NODE_ENV=staging" >> .env.staging
        fi
      displayName: 'Ensure .env.staging exists'

    # Comprimir todo para el despliegue
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/server'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: myportfolio-staging'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              WebAppName: $(webAppName)
              packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              RuntimeStack: 'NODE|22'
              StartupCommand: 'npm run start:staging'
              ScriptType: 'Inline Script'
              InlineScript: |
                npm install --production